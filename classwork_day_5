using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AnonymousPrc
{
    class Program
    {
        static void Main()
        {
            Action o = display;
            Action o1 = hello;
            o();
            o1();
        }
        static void hello()
        {
            Console.WriteLine("Hello");
            Console.ReadLine();
        }
        static void display()
        {
                Console.WriteLine("Display Called");
            Console.ReadLine();
        }
        

           /* Func<int, int, int> o2 = delegate (int a, int b)
                {
                    return a + b;
                };
            Console.WriteLine(o2(10, 20));
            Console.ReadLine();

            int i = 100;
            Action o1 = delegate ()
              {
                  Console.WriteLine("Anon method called");
                  Console.WriteLine(i);
                  Console.WriteLine(++i);
              };
            o1();
            Console.ReadLine();*/

            /*step 3
        
             * Func<int, int> o1 = (a) => a * 2;
            Func<int, int, int> o3 = (a, b) => a + b;
            Func<int, int, int> o4 = (a, b) => a - b;
            Console.WriteLine(o3(10,20));
            Console.WriteLine(o4(60, 20));
            Console.ReadLine();*/
            /* step 1
             * Func<int, int> o1 = a => a * 2;
             Console.WriteLine(o1(10));
             Console.ReadLine();*/
            /* step2
             * Func<int, int> o2 = a => a * 2;

            Console.WriteLine(o2(10));
            Console.ReadLine();*/
        }

       /* public static int GetDouble(int a)*/
    }
-----------------------------------------
//   Delegate prc
-----------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DelegatePrc
{
    /*   public delegate void Del1();*/
    //delegate with no papameters is defined.

    public delegate int DelAdd(int a, int b);
    public class Program
    {
        static void Main()
        {
            DelAdd obj = Add;
            Console.WriteLine(obj(10, 50));
            Console.ReadLine();

            obj = Sub;
            Console.WriteLine(obj(100, 20));
            Console.ReadLine();

            /* static void Main()
             {
                 Del1 objDel = Display;
                 objDel();

                 objDel = Show;
                 objDel();
                 Console.ReadLine();
             }*/
        }
        public static int Add(int a, int b)
        {
            return a + b;
        }

        public static int Sub(int a, int b)
        {
            return a - b;
        }


            /*  public static void Display()
                   {
                       Console.WriteLine("Display called");
                   }
                public  static void Show()
                   {
                       Console.WriteLine("Show called");
                   }*/

        }

    }
---------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DelegatePrc
{
    /*   public delegate void Del1();*/
    //delegate with no papameters is defined.

    public delegate void Del1();
    public class Program
    {
        static void Main()
        {
            Del1 objDel = Display; 
         // obj = methodname without ()
            objDel();
            //Display called

            Console.WriteLine();
            Console.WriteLine();
            objDel += Show;
            objDel();
            //after calling it will go to display first then to show
            /*Display called
            Show called
             */

            Console.WriteLine();
            Console.WriteLine();
            objDel += Display;
            objDel();
            //after calling it will go to display first then to show then again to display
            /* Display called
               Show called
               Display called
            
             * */

            Console.WriteLine();
            Console.WriteLine();
            objDel -= Show;
            objDel();
            //after calling it will go to display first then to show then again to display then
            //subratt display from here
        /*  Display called
Show called
        */
            Console.ReadLine();
        }
        static void Display()
        {
            Console.WriteLine("Display called");
        }
        static void Show()
        {
            Console.WriteLine("Show called");
        }
       

    }

}


