// Generics Practice
/* Step 1 */

// -----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericsPractice
{
   

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Welcome to Generics");
            GenericClass<string> str = new GenericClass<string> ( "This is generic class" );
            GenericClass<int> num = new GenericClass<int> (17);
            GenericClass<float> sal = new GenericClass<float>(18.7f);
            GenericClass<double> salary = new GenericClass<double>(18.78);
            GenericClass<Char> ch = new GenericClass<char>('A');
        }
        class GenericClass<T>
        {
            public GenericClass(T message)
            {
                Console.WriteLine(message);
                Console.ReadLine();
            }
        }



    }

}

// -----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericsPractice
{


    class Program
    {
        static void Main(string[] args)
        {
            IntegerStack obj = new IntegerStack(3);
            obj.Push(10);
            obj.Push(20);
            obj.Push(30);
            Console.WriteLine(obj.Pop());
            Console.WriteLine(obj.Pop());
            Console.WriteLine(obj.Pop());
            Console.ReadLine();
        }
        class IntegerStack
        {
            int[] arr;
            public IntegerStack(int Size)
            {
                arr = new int[Size];
            }
            int Pos = -1;
            public void Push(int i)
            {
                if (Pos == (arr.Length - 1))
                    throw new Exception("Stack full");
                arr[++Pos] = i;
            }
            public int Pop()
            {
                if (Pos == -1)
                    throw new Exception("Stack Empty");
                return arr[Pos--];
            }
        }
    
    }

}


// -----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericsPractice
{


    class Program
    {
        static void Main(string[] args)
        {
            StringStack obj2 = new StringStack(3);
            obj2.Push("pa");
            obj2.Push("sh");
            obj2.Push("pu");
            Console.Write(obj2.Pop());
            Console.Write(obj2.Pop());
            Console.Write(obj2.Pop());
            Console.ReadLine();
        }
        class StringStack
        {
            string[] arr;
            public StringStack(int Size)
            {
                arr = new string[Size];
            }
            int Pos = -1;
            public void Push(string i)
            {
                if (Pos == (arr.Length - 1))
                    throw new Exception("Stack full");
                arr[++Pos] = i;
            }
            public string Pop()
            {
                if (Pos == -1)
                    throw new Exception("Stack Empty");
                return arr[Pos--];
            }
        }
    
    }

}
// -----------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericsPractice
{


    class Program
    {
        static void Main(string[] args)
        {
            StringStack obj2 = new StringStack(3);
            obj2.Push("pa");
            obj2.Push("sh");
            obj2.Push("pu");
            Console.WriteLine(obj2.Pop());
            Console.WriteLine(obj2.Pop());
            Console.WriteLine(obj2.Pop());
            Console.ReadLine();
        }
        class StringStack
        {
            string[] arr;
            public StringStack(int Size)
            {
                arr = new string[Size];
            }
            int Pos = -1;
            public void Push(string i)
            {
                if (Pos == (arr.Length - 1))
                    throw new Exception("Stack full");
                arr[++Pos] = i;
            }
            public string Pop()
            {
                if (Pos == -1)
                    throw new Exception("Stack Empty");
                return arr[Pos--];
            }
        }
    
    }

}


// -----------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenericsPractice
{
   

    class Program
    {
        static void Main(string[] args)
        {
            MyStack<int> obj = new MyStack<int>(3);
            obj.Push(10);
            obj.Push(20);
            obj.Push(30);
            Console.WriteLine(obj.Pop());
            Console.WriteLine(obj.Pop());
            Console.WriteLine(obj.Pop());

            MyStack<string> obj2 = new MyStack<string>(3);
            obj2.Push("pa");
            obj2.Push("b");
            obj2.Push("c");
            Console.WriteLine(obj2.Pop());
            Console.WriteLine(obj2.Pop());
            Console.WriteLine(obj2.Pop());
            Console.ReadLine();
        }
        class MyStack<T>
      
        {
            T[] arr;
            public MyStack(int Size)
            {
                arr = new T[Size];
          
            }
            int Pos = -1;
            public void Push(T i)
            {
                if (Pos == (arr.Length - 1))
                    throw new Exception("Stack full");
                arr[++Pos] = i;
            }
            public T Pop()
            {
                if (Pos == -1)
                    throw new Exception("Stack Empty");
                return arr[Pos--];
            }
        }
    }

}

// -----------------------------------------------------------------------------------------
