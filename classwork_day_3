/*  RefAndValueTypesPractice1 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1 o1 = new Class1();
            Class1 o2 = new Class1();
            o1.i = 100;
            o2.i = 200;
            Console.WriteLine("o1 "+o1.i+" | o2 "+o2.i);
            o1 = o2;
            Console.WriteLine("o1 and o2 are the objects i.e. reference type");
            Console.WriteLine("o1 " + o1.i + " | o2 " + o2.i);
            o2.i = 300;
            Console.WriteLine("as we o1 is refering o2 . The changes made in o2 will be reflected in 01");
            Console.WriteLine("o1 " + o1.i + " | o2 " + o2.i);


            Console.ReadLine();
        }

        public class Class1
        {
            public int i;
        }
    }
}
---------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            int o1 = 100;
            int o2 = 200;
            o1 = o2;
            o2 = 300;
            Console.WriteLine(o1);
            Console.WriteLine(o2);
            Console.ReadLine();
        }

        public class Class1
        {
           
        }
    }
}
------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            string o1, o2;
            o1 = "100";
            o2 = "sujit";
            Console.WriteLine("Before");
            Console.WriteLine(o1+" "+o2);
            Console.WriteLine("--------");
            Console.Beep();
            Console.Beep();
            Console.Beep();
            o1 = o2;
            o2 = "300";
            Console.WriteLine("After");
            Console.WriteLine(o1 + " " + o2);
            Console.Beep();
            Console.Beep();
            Console.Beep();
            Console.ReadLine();
        }

        public class Class1
        {
           
        }
    }
}
-----------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1 o = new Class1();
            o.i = 100;
            
            Console.WriteLine("--------");
            DoSomething1(o);
            Console.WriteLine(o.i);
            Console.Beep();
            Console.Beep();

            Console.WriteLine("--------");
         
            Console.ReadLine();
        }

        static void DoSomething1(Class1 o)
        {
            o.i = 200;
          
        }
        public class Class1
        {
            public int i;
        }
    }
}
--------------------------
ref
-------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1 o = new Class1();
            o.i = 100;
            //DoSomething1(o);
         /*   DoSomething2(o);*/
         // when using ref in method also need to specify in method calling in main
            DoSomething3(ref o);
            Console.WriteLine(o.i);
            Console.ReadLine();
        }

        static void DoSomething3(ref Class1 obj)  //try with out also instead of ref
        {
            //changes made in func (obj pointing to some other block) is reflected in calling code o
            obj = new Class1();
            obj.i = 200;
        }
        public class Class1
        {
            public int i;
        }
    }
}
-----------------------
out
-----------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1 o = new Class1();
            o.i = 100;
            //DoSomething1(o);
         /*   DoSomething2(o);*/
         // when using ref in method also need to specify in method calling in main
            DoSomething3(out o);
            Console.WriteLine(o.i);
            Console.ReadLine();
        }

        static void DoSomething3(out Class1 obj)  //try with out also instead of ref
        {
            //changes made in func (obj pointing to some other block) is reflected in calling code o
            obj = new Class1();
            obj.i = 200;
        }
        public class Class1
        {
            public int i;
        }
    }
}
//same code using out/
-------------------------------------------
