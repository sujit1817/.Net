/*  RefAndValueTypesPractice1 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1 o1 = new Class1();
            Class1 o2 = new Class1();
            o1.i = 100;
            o2.i = 200;
            Console.WriteLine("o1 "+o1.i+" | o2 "+o2.i);
            o1 = o2;
            Console.WriteLine("o1 and o2 are the objects i.e. reference type");
            Console.WriteLine("o1 " + o1.i + " | o2 " + o2.i);
            o2.i = 300;
            Console.WriteLine("as we o1 is refering o2 . The changes made in o2 will be reflected in 01");
            Console.WriteLine("o1 " + o1.i + " | o2 " + o2.i);


            Console.ReadLine();
        }

        public class Class1
        {
            public int i;
        }
    }
}
---------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            int o1 = 100;
            int o2 = 200;
            o1 = o2;
            o2 = 300;
            Console.WriteLine(o1);
            Console.WriteLine(o2);
            Console.ReadLine();
        }

        public class Class1
        {
           
        }
    }
}
------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            string o1, o2;
            o1 = "100";
            o2 = "sujit";
            Console.WriteLine("Before");
            Console.WriteLine(o1+" "+o2);
            Console.WriteLine("--------");
            Console.Beep();
            Console.Beep();
            Console.Beep();
            o1 = o2;
            o2 = "300";
            Console.WriteLine("After");
            Console.WriteLine(o1 + " " + o2);
            Console.Beep();
            Console.Beep();
            Console.Beep();
            Console.ReadLine();
        }

        public class Class1
        {
           
        }
    }
}
-----------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1 o = new Class1();
            o.i = 100;
            
            Console.WriteLine("--------");
            DoSomething1(o);
            Console.WriteLine(o.i);
            Console.Beep();
            Console.Beep();

            Console.WriteLine("--------");
         
            Console.ReadLine();
        }

        static void DoSomething1(Class1 o)
        {
            o.i = 200;
          
        }
        public class Class1
        {
            public int i;
        }
    }
}
--------------------------
ref
-------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1 o = new Class1();
            o.i = 100;
            //DoSomething1(o);
         /*   DoSomething2(o);*/
         // when using ref in method also need to specify in method calling in main
            DoSomething3(ref o);
            Console.WriteLine(o.i);
            Console.ReadLine();
        }

        static void DoSomething3(ref Class1 obj)  //try with out also instead of ref
        {
            //changes made in func (obj pointing to some other block) is reflected in calling code o
            obj = new Class1();
            obj.i = 200;
        }
        public class Class1
        {
            public int i;
        }
    }
}
-----------------------
out
-----------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Class1 o = new Class1();
            o.i = 100;
            //DoSomething1(o);
         /*   DoSomething2(o);*/
         // when using ref in method also need to specify in method calling in main
            DoSomething3(out o);
            Console.WriteLine(o.i);
            Console.ReadLine();
        }

        static void DoSomething3(out Class1 obj)  //try with out also instead of ref
        {
            //changes made in func (obj pointing to some other block) is reflected in calling code o
            obj = new Class1();
            obj.i = 200;
        }
        public class Class1
        {
            public int i;
        }
    }
}
//same code using out/
-------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RefAndValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            int i = 123;
            int j;
            Init(out i, out j);
            Console.WriteLine(i);
            Console.WriteLine(j);
            swap(ref i, ref j);
            Console.WriteLine("Lets Swap");
            Console.WriteLine(i);
            Console.WriteLine(j);
            Console.ReadLine();
        }
        static void Init(out int i, out int j)
        {
            //the initial value is discarded
            // when we use out
            i = 100;
            j = 200;
            //out variables MUST be initialized in the function
        }
       static void swap(ref int i,ref int j)
        {
            int temp = i;
            i = j;
            j = temp;
        }

    }
}
------------------------------------------
********************* > VALUETYPE < **************************
------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ValueTypesPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            Display1(2);
           /* Display2(TimeOfDay.Afternoon);*/
            Console.ReadLine();
        }

        static void Display1(int t)
        {
            string name=Console.ReadLine();
            if (t == 0)
                Console.WriteLine("Good Morning" + name);
            else if (t == 1)
                Console.WriteLine("Good Afternoon" + name);
            else if (t == 2)
                Console.WriteLine("Good Evening "+name);
            else if (t == 3)
                Console.WriteLine("Good Night" + name);
        }
    }
}

/* Array and methods practice */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArraysPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] arr = new int[5];
            //arr[0] ... arr[4] from index 0 to 4
            
            /*for(int i=0; i<arr.Length; i++)
            {
                Console.WriteLine(i);
                Console.ReadLine();
            }*/
            string[] cars = { "Volvo", "BMW", "Ford", "Mazda" };
              Console.WriteLine(cars.Length);
            for (int i = 0; i < cars.Length; i++)
            {
                Console.WriteLine(cars[i]);
                Console.ReadLine();
            }


            int[] myNumbers = { 5, 1, 8, 9 };
            Array.Sort(myNumbers);
            // sort method to sort an array
            foreach (int i in myNumbers)
            {
                Console.WriteLine(i);
                Console.ReadLine();
            }

        }
    }
}
--------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArraysPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] arr = new int[5];
            //arr[0] ... arr[4] from index 0 to 4
            int j = 10;

            for (int i = 0; i < arr.Length; i++)
            {
                Console.WriteLine("Enter for index {0} :j = {1} ", i, j++);
                Console.WriteLine("Enter for index : {0}", i);
                Console.ReadLine();
            }
            string[] cars = { "Volvo", "BMW", "Ford", "Mazda" };
            Console.WriteLine("Length of the cars Array : "+cars.Length);
            for (int i = 0; i < cars.Length; i++)
            {
                Console.WriteLine(cars[i]);
                Console.ReadLine();
            }


            int[] myNumbers = { 5, 1, 8, 9 };
            Array.Sort(myNumbers);
            foreach (int i in myNumbers)
            {
                Console.WriteLine(i);
                Console.ReadLine();
            }

        }
    }
}
--------------------------------------------------------------
Array prc
------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArraysPractice
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] arr = new int[5];
            //arr[0] ... arr[4] from index 0 to 4
            int j = 10;
            int k =5;

          

            for (int i = 0; i < arr.Length; i++)
            {
                Console.WriteLine("Enter for index {0} :j = {1} k= {2} ", i, j++,k);
                Console.WriteLine("Enter for index : {0}", i);
                Console.ReadLine();
            }
            string[] cars = { "Volvo", "BMW", "Ford", "Mazda" };
            Console.WriteLine("Length of the cars Array : "+cars.Length);
            for (int i = 0; i < cars.Length; i++)
            {
                Console.WriteLine(cars[i]);
                Console.ReadLine();
            }


            int[] myNumbers = { 5, 1, 8, 9 };
            Array.Sort(myNumbers);
            foreach (int i in myNumbers)
            {
                Console.WriteLine(i);
                Console.ReadLine();
            }

        }
    }
}
-------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArrayAssign
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] weekDays;

            weekDays=new string[] {"Sun", "Mon", "Tue", "Wed",
                                       "Thu", "Fri", "Sat"};
            // Displaying Elements of array
            foreach (String day in weekDays)
                Console.Write(day + " ");
            Console.ReadLine();

        }
    }
}


